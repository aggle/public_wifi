#+TITLE: Table API
How to interact with the tables

* Listing, reading, and writing
** Table storage
The data tables are by default stored in `tr14/data/tables/db.hdf5`. This path can be changed by editing `tr14/tr14/config.ini`.
HDF (Hierarchical Data Format) files are capable of storing different tables in the same file, accessed by a unique "key" for each table. Use the functions described below for interacting with the tables. 
Since the tables are python pandas DataFrames, which can be slightly weird to store in HDF format, I exclusively use the pandas library to read from/write to the database file. The functions below are intended to do this safely and consistently with the particular data used in the Tr14 project.

** List available tables
Print a list of the keywords for the tables stored in `db.hdf5`. For documentation of these tables and their entries, see the [[file:list_of_tables.org][List of Tables]].
#+begin_src python
import table_utils
table_utils.list_available_tables()
#+end_src

** Load a table
`key` is one of the keys listed by `table_utils.list_available_tables()`.
#+begin_src python
import table_utils
table = table_utils.load_table(key)
#+end_src

** Write a table
This stores the table under the given key in the database file.
#+begin_src python
table = pd.DataFrame(data)
table_utils.write_table(table, "table_key")
#+end_src


* Helpful shortcuts
** Find a file name using the exposure ID
Each point source is associated with an exposure, with an exposure ID, that is stored in a FLT fits file. To find the file associated with a particular exposure, use:
#+begin_src python
import table_utils
file_name = table_utils.get_file_name_from_exp_id(exp_id)
#+end_src
This gives you the name of the FLT file, but not the full path.
** Find a filter name from the filter ID
The HST filters are not stored under their HST names, but under a unique ordered identifier. To find out the HST name for a particular filter, use:
#+begin_src python
import table_utils
filter_name = table_utils.get_filter_name_from_filter_id(filter_id)
#+end_src
This gives you the name of the HST filter.
** Perform a generic matching query
If you want to perform a simple match in a table (i.e. with the '==' operator, like to find the `u_mast` value of a star with star_id `S000000`), use table_utils.match_value_in_table:
#+begin_src python
import table_utils
table = pd.DataFrame(data)
query_col = 'star_id'
match_val = 'S000000'
return_col = 'u_mast'
u_mast = table_utils.match_value_in_table(stars, 'star_id', 'S000000', 'u_mast')
#+end_src
If return_col = None, you'll get the entire matching row (or all matching rows) from the table

