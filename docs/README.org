#+title: PUBLIC WIFI user guide

The final state of the Trumpler 14 analysis package will consist of the following independent components:

1. *Database*
2. *PSF subtraction*
4. *Photometry and detection*
5. *Completeness*

Currently, only *Database* and *PSF subtraction* are implemented. See below for usage, and at the end of the file for a brief description of each component.

A conda environment that is compatible with this version of PUBLIC WIFI is provided in `docs/conda-public_wifi.yml` (it has more packages than are strictly necessary). You can create the environment from a terminal with the command `conda env create -f conda-public_wifi.yml`. You can then activate the environment with `conda activate public_wifi`. 

* Usage

This is going to be pretty bare-bones, reflecting the current state of the software.

The database is managed by the ~db_manager.DBManager~ class, and the psf subtraction is managed by the ~subtr_utils.SubtrManager~ class. ~shared_utils~ holds various useful values like file paths to the database. Import the following modules from wherever the tr14 base folder is located:
#+begin_src python
tr14.utils.shared_utils
tr14.utils.db_manager
tr14.utils.subtr_utils
#+end_src

** Instantiating the database
First, create an instance of the database manager. It takes one argument, which is a path to the file where the database is stored. You probably want the path stored at ~shared_utils.db_clean_file~, which contains the database after preliminary cleaning for visual binaries, bad pixels, cosmics, etc:
#+begin_src python
db_master = db_manager.DBManager(data_path=shared_utils.db_clean_file)
#+end_src
~db_master~ then reads all the available tables from memory and groups the point source detections into self-contained PSF subtraction units (that is, the groups of PSFs that will be used to subtract each other). The point sources are currently grouped by, in order, 'ps_filt_id' (the filter), 'ps_epoch_id' (the epoch), and  'sector_id' (the gridded location on the detector). These groups are stored in ~DBManager.subtr_groups~, which is a pandas groupby object. Each group contains three columns -- the star (~star_id~), point source detection (~ps_id~), and stamp (~stamp_id~) identifiers that belong to a subtraction group. To create a subset of the database, get the key and call ~DBManager.create_subtr_subset_db(key)~



** Performing PSF subtraction
To perform PSF subtraction on a subtraction group, first select one of the ~DBManager.subtr_group~ keys and pass the key to ~DBManager.create_subtr_subset_db(key)~. This function returns a new DBManager instance, containing only the subset of the database that corresponds to the subtraction group.
For example:
#+begin_src python
key = list(dbm_master.subtr_groups.groups.keys())[0]
dbm_subtr = dbm_master.create_subtr_subset_db(key)
#+end_src
Next, create a subtraction manager instance, passing the database manager instance as an argument:
#+begin_src python
subtrm = subtr_utils.SubtrManager(dbm_subtr)
#+end_src
There is an optional argument, ~calc_corr_flag=[True, False]~, that can switch on or off the calculation of the PSF correlation matrices (switch off if you want to use all the PSFs regardless of correlation score). More on this later.
The DBManager instance can always be accessed by ~SubtrManager.db~.

Finally, perform PSF subtraction using
#+begin_src python
subtrm.perform_table_subtraction()
#+end_src
This function assigns three new attributes to the SubtrManager instance:
- ~subtrm.psf_subtr~ : the psf subtraction results
- ~subtrm.psf_model~ : the corresponding PSF models
- ~subtrm.subtr_refs~ : the list of references used to subtract each stamp
~psf_subtr~ and ~psf_model~ are pandas DataFrames, whose index indicates the stamp that was the target for PSF subtraction. The column indicates the value of Kklip (aka ~numbasis~). ~subtr_refs~ is also a DataFrame, whose column indicates the target stamp. The entries of each column are the reference stamps used to build that target's model PSF, in no particular order.

** This is where we're at right now.
We are still figuring out how to choose references and how to perform the photometry and analysis.

* Components
This section contains a description of the objects and tables in the database
** Database manager
The Database component handles bookkeeping of the initial database of astrophysical objects.

** PSF subtraction manager
PSF subtraction is handled by a class called SubtrManager, defined in utils.subtr_utils.py
*** SubtrManager
**** Attributes
***** db
The parent database that is being subtracted
***** reference_table
pd.DataFrame with the database's stamp_ids as indices and columns. The elements are True if the row stamp_id was used as a reference for the column stamp_id - that is, each column contains a list of the references used for the PSF subtraction.
***** corr_func_args_dict
Dictionary with keys 'mse', 'pcc', and 'ssim'. Each entry is a dict of kwargs that is passed to the corresponding correlation function
***** klip_args_dict
Dictionary of arguments for klip-based subtraction
***** nmf_args_dict
Dictionary of arguments for NMF-based subtraction
***** corr_mats
namedtuple of correlation matrices: corr_mats.{mse,pcc,ssim}
**** Methods
***** calc_corr_psfs()
Calculates *all* the correlation matrices and stores results in self.corr_mats, a namedtuple.
***** perform_table_subtraction()
This performs PSF subtraction on the database in self.db.
returns the results tuple with elements. Users should use this one, and pass the particular algorithm as argument, i.e.
`SubtrManager.perform_table_subtraction(subtr_klip, SubtrManager.klip_args_dict)`
***** subtr_klip()
Function for performing KLIP subtraction.
***** subtr_nmf()
Function for performing NMF subtraction

** Photometry and detection

** Completeness
